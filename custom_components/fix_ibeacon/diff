diff --git a/bluetooth/const.py b/bluetooth/const.py
index 6d6751f..611fed5 100644
--- a/bluetooth/const.py
+++ b/bluetooth/const.py
@@ -27,7 +27,7 @@ SOURCE_LOCAL: Final = "local"
 
 DATA_MANAGER: Final = "bluetooth_manager"
 
-UNAVAILABLE_TRACK_SECONDS: Final = 60 * 5
+UNAVAILABLE_TRACK_SECONDS: Final = 60
 
 START_TIMEOUT = 15
 
diff --git a/ibeacon/const.py b/ibeacon/const.py
index 19b3a6f..6d1b660 100644
--- a/ibeacon/const.py
+++ b/ibeacon/const.py
@@ -20,11 +20,11 @@ ATTR_MAJOR = "major"
 ATTR_MINOR = "minor"
 ATTR_SOURCE = "source"
 
-UNAVAILABLE_TIMEOUT = 180  # Number of seconds we wait for a beacon to be seen before marking it unavailable
+UNAVAILABLE_TIMEOUT = 30  # Number of seconds we wait for a beacon to be seen before marking it unavailable
 
 # How often to update RSSI if it has changed
 # and look for unavailable groups that use a random MAC address
-UPDATE_INTERVAL = timedelta(seconds=60)
+UPDATE_INTERVAL = timedelta(seconds=10)
 
 # If a device broadcasts this many unique ids from the same address
 # we will add it to the ignore list since its garbage data.
diff --git a/ibeacon/coordinator.py b/ibeacon/coordinator.py
index 33b33c5..dff7870 100644
--- a/ibeacon/coordinator.py
+++ b/ibeacon/coordinator.py
@@ -84,15 +84,13 @@ def _async_dispatch_update(
     unique_address: bool,
 ) -> None:
     """Dispatch an update."""
-    if new:
-        async_dispatcher_send(
-            hass,
-            SIGNAL_IBEACON_DEVICE_NEW,
-            device_id,
-            async_name(service_info, ibeacon_advertisement, unique_address),
-            ibeacon_advertisement,
-        )
-        return
+    async_dispatcher_send(
+        hass,
+        SIGNAL_IBEACON_DEVICE_NEW,
+        device_id,
+        async_name(service_info, ibeacon_advertisement, unique_address),
+        ibeacon_advertisement,
+    )
 
     async_dispatcher_send(
         hass,
@@ -308,12 +306,12 @@ class IBeaconCoordinator:
                 self.hass, self._async_handle_unavailable, address
             )
 
-        if not previously_tracked and new and ibeacon_advertisement.transient:
-            # Do not create a new tracker right away for transient devices
-            # If they keep advertising, we will create entities for them
-            # once _async_update_rssi_and_transients has seen them enough times
-            self._transient_seen_count[address] = 1
-            return
+#        if not previously_tracked and new and ibeacon_advertisement.transient:
+#            # Do not create a new tracker right away for transient devices
+#            # If they keep advertising, we will create entities for them
+#            # once _async_update_rssi_and_transients has seen them enough times
+#            self._transient_seen_count[address] = 1
+#            return
 
         # Some manufacturers violate the spec and flood us with random
         # data (sometimes its temperature data).
diff --git a/ibeacon/device_tracker.py b/ibeacon/device_tracker.py
index 4c9337e..b6fc199 100644
--- a/ibeacon/device_tracker.py
+++ b/ibeacon/device_tracker.py
@@ -65,7 +65,7 @@ class IBeaconTrackerEntity(IBeaconEntity, BaseTrackerEntity):
     @property
     def state(self) -> str:
         """Return the state of the device."""
-        return STATE_HOME if self._active else STATE_NOT_HOME
+        return self._ibeacon_advertisement.source if self._active else STATE_NOT_HOME
 
     @property
     def source_type(self) -> SourceType:
